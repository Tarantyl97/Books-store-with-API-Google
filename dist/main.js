/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const content = document.querySelector('.contents');\r\nconst btnBuy = document.querySelector('.new-book__btn');\r\nconst loadBtn = document.querySelector('.contents-load__btn');\r\nconst categoryBtn = document.querySelector('.navigation-sorting__btn');\r\nconst categoryList = document.querySelector('.navigation-sorting__list');\r\nlet listImg = document.querySelectorAll(\".navigation-images__list  li\");\r\nlet last = listImg[listImg.length - 1];\r\n\r\nlet allBooks = [];\r\n\r\nfunction Book(id, image, authors, title, stars, count, description, price) {\r\n    this.id = id;\r\n    this.image = image;\r\n    this.authors = authors;\r\n    this.title = title;\r\n    this.stars = stars;\r\n    this.count = count;\r\n    this.description = description;\r\n    this.price = price;\r\n  }\r\n  \r\n  Book.prototype.render = function() {\r\n  }\r\n\r\nlet id = 0\r\nlet startIndex = 0;\r\nlet categoryName = \"harry potter\";\r\n\r\nfunction getBooks() {\r\nfetch(`https://www.googleapis.com/books/v1/volumes?q=${categoryName}&key=AIzaSyA33u6Vy5_rE0bumpGmDcUllKBefScJ66E&printType=books&startIndex=${startIndex}&maxResults=6&langRestrict=en`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        data.items.forEach(item => {\r\n            ++id;\r\n            const image = item.volumeInfo.imageLinks?.thumbnail;\r\n            const authors = item.volumeInfo.authors?.join(\", \");\r\n            const title = item.volumeInfo.title ?? \"No title available\";\r\n            const stars = item.volumeInfo.averageRating ?? \"No rating available\";\r\n            const count = item.volumeInfo.ratingsCount ?? \"0\";\r\n            const description = item.volumeInfo.description ?? \"No description available\";\r\n            const price = item.saleInfo?.retailPrice?.amount;\r\n\r\n    let book = new Book(id, image, authors, title, stars, count, description, price);\r\n    book.render();\r\n    allBooks.push(book);\r\n\r\n    let starsHtml = '';\r\n        for (let i = 0; i < Math.round(book.stars); i++) {\r\n            starsHtml += '<span class=\"star\">&#9733;</span>';\r\n        }\r\n        for (let i = Math.round(book.stars); i < 5; i++) {\r\n            starsHtml +=  '<span class=\"star\">&#9734;</span>';\r\n        }\r\n\r\n    let bookHtml = `\r\n      <div id=\"book-${book.id}\" class=\"new-book\">\r\n          <img class=\"new-book__img\" src=\"${book.image}\" alt=\"book\"/>\r\n          <div class=\"new-book__main-text\">\r\n              ${book.authors ? `<p class=\"new-book__authors\">${book.authors}</p>` : \"\"}\r\n              ${book.title ? `<p class=\"new-book__title\">${book.title}</p>` : \"\"}\r\n              ${starsHtml && book.count ? `<p class=\"new-book__raiting\">${starsHtml}, ${book.count} review</p>` : \"\"}\r\n              ${book.description ? `<p class=\"new-book__info\">${book.description}</p>` : \"\"}\r\n              ${book.price ? `<p class=\"new-book__price\">${book.price} RUB</p>` : `<p class=\"new-book__price\">No price available</p>`}\r\n              <button class=\"new-book__btn\">buy now</button>\r\n          </div>\r\n      </div>\r\n    `;\r\n\r\n    content.insertAdjacentHTML('beforeEnd', bookHtml)\r\n        });\r\n    })\r\n    .catch(error => {\r\n  // обработка ошибки\r\n    console.error(error);\r\n    });\r\n};\r\n\r\nloadBtn.addEventListener('click', () => {\r\n    startIndex += 6;\r\n});\r\n\r\ngetBooks()\r\n\r\nloadBtn.addEventListener('click', getBooks);\r\n\r\nlet prevBtn = null;\r\n\r\ncategoryList.addEventListener('click', (event) => {\r\n    if(event.target.classList.contains('navigation-sorting__btn')) {\r\n        if (prevBtn !== null) {\r\n            prevBtn.classList.remove('navigation-sorting__btn_active');\r\n            content.innerHTML = '';\r\n            categoryName = event.target.textContent;\r\n            startIndex = 0;\r\n        };\r\n        event.target.classList.add('navigation-sorting__btn_active');\r\n        categoryName = event.target.textContent;\r\n        getBooks()\r\n        content.innerHTML = '';\r\n        prevBtn = event.target;\r\n    };\r\n});\r\n\r\n// content.addEventListener('click', (event) => {\r\n//     if(event.target.classList.contains('new-book__btn')) {\r\n//         if (event.target.classList.contains('new-book__btn_active')) {\r\n//             event.target.innerHTML = 'buy now';\r\n//         } else {\r\n//             event.target.innerHTML = 'in the cart';\r\n//             // localStorage.setItem('rememberBtn', active)\r\n//             // localStorage.getItem('rememberBtn', active)\r\n//             allBooks.push(book${event.target.value})\r\n//         }\r\n//         event.target.classList.toggle('new-book__btn_active');\r\n//     }\r\n// });\r\n\r\nlet count = 0;\r\n// let countStorage = localStorage.getItem('cartCount')\r\n\r\ncontent.addEventListener('click', (event) => {\r\n  if (event.target.classList.contains('new-book__btn_active')) {\r\n    count += 1;\r\n\r\n    if(count > localStorage.getItem('cartCount')) {\r\n        localStorage.setItem('cartCount', count)\r\n    }\r\n    const cartCount = `<div class='count'>${count}</div>`;\r\n    last.insertAdjacentHTML('beforeEnd', cartCount);\r\n\r\n  } else if (event.target.classList.contains('new-book__btn')) {\r\n    if (count > 0) {\r\n      count -= 1;\r\n\r\n    //   localStorage.setItem('cartCount', count)\r\n    //   localStorage.getItem('cartCount', count)\r\n        let cartItems = document.querySelectorAll('.count');\r\n        let lastItem = cartItems[cartItems.length - 1];\r\n      lastItem.remove();\r\n    }\r\n  }\r\n});\r\n\r\n// let count = localStorage.getItem('cartCount');\r\n\r\nfunction pageLoaded() {\r\n    const cartCount = `<div class='count'>${localStorage.getItem('cartCount', count)}</div>`;\r\n    last.insertAdjacentHTML('beforeEnd', cartCount);\r\n}\r\n\r\ncontent.addEventListener('DOMContentLoaded', pageLoaded)\r\n\r\ncontent.addEventListener('click', (event) => {\r\n    if (event.target.classList.contains('new-book__btn')) {\r\n        if (event.target.classList.contains('new-book__btn_active')) {\r\n            event.target.innerHTML = 'buy now';\r\n            localStorage.setItem('button-' + event.target.value, false);\r\n        } else {\r\n            event.target.innerHTML = 'in the cart';\r\n            localStorage.setItem('button-' + event.target.value, true);\r\n            // allBooks.push(book${event.target.value})\r\n        }\r\n        event.target.classList.toggle('new-book__btn_active');\r\n    }\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const buttons = document.querySelectorAll('.new-book__btn');\r\n    buttons.forEach(button => {\r\n        const isActive = localStorage.getItem('button-' + button.value) === 'true';\r\n        if (isActive) {\r\n            button.classList.add('new-book__btn_active');\r\n            button.innerHTML = 'in the cart';\r\n        }\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://book-store-2/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;